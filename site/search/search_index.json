{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Kooplex \u00b6 Kooplex is a collaborative platform designed for coding, data analysis, and publishing results in a seamless, browser-based environment. Whether you are a researcher, educator, or student, Kooplex provides the tools you need to develop, share, and present your work efficiently. What is Kooplex? \u00b6 Kooplex brings together the power of interactive notebooks (such as Jupyter and RStudio), version-controlled repositories, and cloud-based file sharing into a unified workspace. It enables individuals and teams to: Write and run code in various programming languages Collaborate on projects with shared folders and version control Publish interactive reports and dashboards for wider audiences Teach and learn using assignment workflows and feedback tools Key Features \u00b6 Browser-based environments: Access your coding workspace from anywhere, with no setup required. Project collaboration: Share data, code, and results with team members in real time. Integrated publishing: Turn your notebooks into interactive reports, dashboards, or APIs with a few clicks. Flexible storage: Organize your files with private, shared, and synchronized folders. Education support: Manage courses, assignments, and feedback for teachers and students. Get Started \u00b6 Explore the User Guide for a detailed overview. Check out User working environments to set up your first project. Visit the FAQ if you have questions or run into issues. Kooplex is open source and welcomes contributions from the community. For more information, visit the official Kooplex page or the source code repository . Happy exploring!","title":"Home"},{"location":"#welcome_to_kooplex","text":"Kooplex is a collaborative platform designed for coding, data analysis, and publishing results in a seamless, browser-based environment. Whether you are a researcher, educator, or student, Kooplex provides the tools you need to develop, share, and present your work efficiently.","title":"Welcome to Kooplex"},{"location":"#what_is_kooplex","text":"Kooplex brings together the power of interactive notebooks (such as Jupyter and RStudio), version-controlled repositories, and cloud-based file sharing into a unified workspace. It enables individuals and teams to: Write and run code in various programming languages Collaborate on projects with shared folders and version control Publish interactive reports and dashboards for wider audiences Teach and learn using assignment workflows and feedback tools","title":"What is Kooplex?"},{"location":"#key_features","text":"Browser-based environments: Access your coding workspace from anywhere, with no setup required. Project collaboration: Share data, code, and results with team members in real time. Integrated publishing: Turn your notebooks into interactive reports, dashboards, or APIs with a few clicks. Flexible storage: Organize your files with private, shared, and synchronized folders. Education support: Manage courses, assignments, and feedback for teachers and students.","title":"Key Features"},{"location":"#get_started","text":"Explore the User Guide for a detailed overview. Check out User working environments to set up your first project. Visit the FAQ if you have questions or run into issues. Kooplex is open source and welcomes contributions from the community. For more information, visit the official Kooplex page or the source code repository . Happy exploring!","title":"Get Started"},{"location":"environments/","text":"Environments \u00b6 Create an environment \u00b6 Control panel for an environment \u00b6 The panel: Explanation for the panel buttons: Open Jupyter/Rstudio etc, The name of the environment Stop the environment Enable Teleport (for remote access with e.g. vscode) Image type of the environment Logs of the running environment Status of the running environment Enable Seafile cloud storae to be mounted into the environment List and count of mounted (projects/volumes/courses) Limit of available resources: CPU, Memory and allowed idle timelength Launch the environment Delete permanently the environment In case of any problems with the environment the given message on the panel or in the logs might help to resolve the conflict, or should be reported to the site administrators when asking for help. When it is stopped the container ceases to exist, but the files are kept that are in any of the permanent storage spaces Configure an environment \u00b6 Name/Image/Resources Projects Courses Attachments Volumes For example add a volume to an existing environment Select an Image \u00b6 One can choose a suitable working environment by choosing the right image. Docker images are the basis of containers. An Image is a template for virtualized/containerized working environments. Most of the necessary packages and utiities are installed into the images. Read more Computational Resources \u00b6 Node : If permitted, then select a server for the environment CPU/Memory : If needed for computational or memory intensive calculations the container resources can be increased. Please mind that containers reserve these resources as long as they are running and no other container can use it. GPU : In case any nodes have GPU cards. Package management within environments \u00b6 See Package management Some conda environments and non-conda tools might be installed into attachments -> See Volumes, Storage","title":"Create and configure"},{"location":"environments/#environments","text":"","title":"Environments"},{"location":"environments/#create_an_environment","text":"","title":"Create an environment"},{"location":"environments/#control_panel_for_an_environment","text":"The panel: Explanation for the panel buttons: Open Jupyter/Rstudio etc, The name of the environment Stop the environment Enable Teleport (for remote access with e.g. vscode) Image type of the environment Logs of the running environment Status of the running environment Enable Seafile cloud storae to be mounted into the environment List and count of mounted (projects/volumes/courses) Limit of available resources: CPU, Memory and allowed idle timelength Launch the environment Delete permanently the environment In case of any problems with the environment the given message on the panel or in the logs might help to resolve the conflict, or should be reported to the site administrators when asking for help. When it is stopped the container ceases to exist, but the files are kept that are in any of the permanent storage spaces","title":"Control panel for an environment"},{"location":"environments/#configure_an_environment","text":"Name/Image/Resources Projects Courses Attachments Volumes For example add a volume to an existing environment","title":"Configure an environment"},{"location":"environments/#select_an_image","text":"One can choose a suitable working environment by choosing the right image. Docker images are the basis of containers. An Image is a template for virtualized/containerized working environments. Most of the necessary packages and utiities are installed into the images. Read more","title":"Select an Image"},{"location":"environments/#computational_resources","text":"Node : If permitted, then select a server for the environment CPU/Memory : If needed for computational or memory intensive calculations the container resources can be increased. Please mind that containers reserve these resources as long as they are running and no other container can use it. GPU : In case any nodes have GPU cards.","title":"Computational Resources"},{"location":"environments/#package_management_within_environments","text":"See Package management Some conda environments and non-conda tools might be installed into attachments -> See Volumes, Storage","title":"Package management within environments"},{"location":"folderstructure/","text":"--> studio users go here for a more detailed explanation Root folder is /v . \u00b6 Everything is mounted into this read-only folder. We have the following folders in /v/ : Private folders \u00b6 <username>/ - a users own, private folder (home) scratch/ - temporary storage] (e.g. for large calculations) cloud/ - selected folders from Seafile (if any folder is mounted to the environment) vc/ - version controlled repositories (if any repository is added to the environment) Project related folders \u00b6 Any number of projects can be set for each environment , and also a project an be associated with any number of environments . For each project a folder will appear in the projects/ folder and in the report_prepare/ folder. projects/ - multiple projects can be mounted to an environment. Share data with collaborators report_prepare/ - a folder for each project to place all files and data for a report. See reports Storage folders \u00b6 Coming soon... See details Each volume will appear in the volumes/ folder. volumes/ - read-only datasets and storage for publicly shared data, programs, config files etc attachments/ - storage for publicly shared data, programs, config files etc garbage/ - automatically archived content (e.g. when a project is deleted) Course folders \u00b6 Any number of courses can be set for each environment , and also a course an be associated with any number of environments . For each course the relevant folders will appear in the courses/ folder (See Folders and Storage !). courses/ - several folders for each course <course_name>.assignment_prepare/ - Put the content of a future assignment into a separate folder. It will be selectable from the Education menu -> Assignment management -> New assignment tab (for Teacher's only, See how to add new assignment ) <course_name>.assignments/ - All students' assignment (working) folder is placed here. From these folders will be the content trensferred to the teachers' correct folder after submission. <course_name>.correct/ - Submitted assigments appear here for corrections (for Teacher's only) <course_name>.public/ - All members of the course can see and edit the contents here Service folders \u00b6 Seafile (cloud base file sharing) \u00b6 You can add folders from the Seafile cloud based file storing and sharing platform. Read more about file synchronization Repository from the Gitea (version controlled content) \u00b6 Repositories can be added from Gitea/Github etc. Read more about repository adding Access folders in Rstudio \u00b6 To access all folders you need to go to /v :","title":"Folder Structure"},{"location":"folderstructure/#root_folder_is_v","text":"Everything is mounted into this read-only folder. We have the following folders in /v/ :","title":"Root folder is /v."},{"location":"folderstructure/#private_folders","text":"<username>/ - a users own, private folder (home) scratch/ - temporary storage] (e.g. for large calculations) cloud/ - selected folders from Seafile (if any folder is mounted to the environment) vc/ - version controlled repositories (if any repository is added to the environment)","title":"Private folders"},{"location":"folderstructure/#project_related_folders","text":"Any number of projects can be set for each environment , and also a project an be associated with any number of environments . For each project a folder will appear in the projects/ folder and in the report_prepare/ folder. projects/ - multiple projects can be mounted to an environment. Share data with collaborators report_prepare/ - a folder for each project to place all files and data for a report. See reports","title":"Project related folders"},{"location":"folderstructure/#storage_folders","text":"Coming soon... See details Each volume will appear in the volumes/ folder. volumes/ - read-only datasets and storage for publicly shared data, programs, config files etc attachments/ - storage for publicly shared data, programs, config files etc garbage/ - automatically archived content (e.g. when a project is deleted)","title":"Storage folders"},{"location":"folderstructure/#course_folders","text":"Any number of courses can be set for each environment , and also a course an be associated with any number of environments . For each course the relevant folders will appear in the courses/ folder (See Folders and Storage !). courses/ - several folders for each course <course_name>.assignment_prepare/ - Put the content of a future assignment into a separate folder. It will be selectable from the Education menu -> Assignment management -> New assignment tab (for Teacher's only, See how to add new assignment ) <course_name>.assignments/ - All students' assignment (working) folder is placed here. From these folders will be the content trensferred to the teachers' correct folder after submission. <course_name>.correct/ - Submitted assigments appear here for corrections (for Teacher's only) <course_name>.public/ - All members of the course can see and edit the contents here","title":"Course folders"},{"location":"folderstructure/#service_folders","text":"","title":"Service folders"},{"location":"folderstructure/#seafile_cloud_base_file_sharing","text":"You can add folders from the Seafile cloud based file storing and sharing platform. Read more about file synchronization","title":"Seafile (cloud base file sharing)"},{"location":"folderstructure/#repository_from_the_gitea_version_controlled_content","text":"Repositories can be added from Gitea/Github etc. Read more about repository adding","title":"Repository from the Gitea (version controlled content)"},{"location":"folderstructure/#access_folders_in_rstudio","text":"To access all folders you need to go to /v :","title":"Access folders in Rstudio"},{"location":"images/","text":"Images \u00b6 Docker images provide a consistent environment for browser-based applications, ensuring that all dependencies and configurations are included. This makes it easy to deploy, update, and scale applications across different systems without compatibility issues. Users benefit from improved reliability and simplified troubleshooting, as each container runs in isolation from the host system. Notebook servers \u00b6 Jupyter \u2013 A web-based interactive computing environment that allows you to create and share documents containing live code, equations, visualizations, and narrative text. JupyterLab \u2013 An advanced, flexible interface for working with Jupyter notebooks, code, and data, offering a more powerful user experience with support for multiple documents and activities. RStudio \u2013 An integrated development environment (IDE) for R, providing tools for writing scripts, running code, and visualizing data in a user-friendly interface. Remote Jupyter Kernels in VSCode \u00b6 You can connect your desktop VSCode to remote Jupyter kernels hosted at https://kooplex-example.hu/notebook : Install the Jupyter extension in VSCode. Open the Command Palette ( Ctrl+Shift+P ) and select Jupyter: Specify Jupyter server for connections . Enter the URL of the remote Jupyter server: https://kooplex-example.hu/notebook Authenticate if prompted. Open or create a .ipynb notebook file. You can now select and use remote kernels provided by Kooplex directly from VSCode. This setup allows you to leverage powerful remote resources while working in your familiar local VSCode environment. Consists of all the necessary modules and attachments to serve e.g. an interactive plot, an applications that returns some data etc.","title":"Images"},{"location":"images/#images","text":"Docker images provide a consistent environment for browser-based applications, ensuring that all dependencies and configurations are included. This makes it easy to deploy, update, and scale applications across different systems without compatibility issues. Users benefit from improved reliability and simplified troubleshooting, as each container runs in isolation from the host system.","title":"Images"},{"location":"images/#notebook_servers","text":"Jupyter \u2013 A web-based interactive computing environment that allows you to create and share documents containing live code, equations, visualizations, and narrative text. JupyterLab \u2013 An advanced, flexible interface for working with Jupyter notebooks, code, and data, offering a more powerful user experience with support for multiple documents and activities. RStudio \u2013 An integrated development environment (IDE) for R, providing tools for writing scripts, running code, and visualizing data in a user-friendly interface.","title":"Notebook servers"},{"location":"images/#remote_jupyter_kernels_in_vscode","text":"You can connect your desktop VSCode to remote Jupyter kernels hosted at https://kooplex-example.hu/notebook : Install the Jupyter extension in VSCode. Open the Command Palette ( Ctrl+Shift+P ) and select Jupyter: Specify Jupyter server for connections . Enter the URL of the remote Jupyter server: https://kooplex-example.hu/notebook Authenticate if prompted. Open or create a .ipynb notebook file. You can now select and use remote kernels provided by Kooplex directly from VSCode. This setup allows you to leverage powerful remote resources while working in your familiar local VSCode environment. Consists of all the necessary modules and attachments to serve e.g. an interactive plot, an applications that returns some data etc.","title":"Remote Jupyter Kernels in VSCode"},{"location":"packagemanagement/","text":"Package management for Python \u00b6 Create a conda environment \u00b6 > conda create -y --name new_env # Create the nw environment > . /opt/conda/bin/activate # Activate it > conda activate new_env > conda install -y python=3.10 # Install python interpreter # Install packages > conda install -y -c conda-forge --force cudnn cudatoolkit=11.8.0` > conda install -y pip ipykernel # Install ipykernel if you want to use it in notebooks > pip install nvidia-cudnn-cu11==8.6.0.163 > pip install tensorflow==2.12 > ipython kernel install --user --name=new-env - this is needed only if you install it to path, where jupyter is not seeing it. Use a conda environment \u00b6 Before activating a conda environment type: > . /opt/conda/bin/activate 1. method conda activate <env_name> \u00b6 for a locally created conda environment - with conda create -n <env_name> that resides in ~/.conda/envs/<env_name> or a conda environment that comes with the image For example > . /opt/conda/bin/activate > conda activate tensorflow 2. method conda activate <path_to_env> \u00b6 for a conda environment created into folder or attachment - for example with the command 'conda create -p /v/attachments/ ' Then type > ipython kernel install --user --name=tensorflow The 'kernel install command' is needed only once. This will install the kernel into userspace (into /v/$NB_USER/.local/share/jupyter/kernels/tensorflow user directory) and jupyter will be able to use it in the future. E.g. > . /opt/conda/bin/activate > conda activate /v/attachments/tensorflow/ > ipython kernel install --user --name=tensorflow List available kernels to check whether it worked jupyter-kernelspec list With uv \u00b6 An extremely fast Python package installer and resolver, written in Rust Read about uv here: * https://astral.sh/blog/uv * https://github.com/astral-sh/uv Activate it with: > . /opt/python-packages/bin/activate Then install a package uv pip install sqlalchemy pandas With poetry \u00b6 Poetry-kernel is installed to v8 images, therefore it is possible to use poetry environments in notebooks. Visit https://python-poetry.org/ for documentation. With pyenv \u00b6 witch between Python versions To select a Pyenv-installed Python as the version to use, run one of the following commands: pyenv shell <version> -- select just for current shell session pyenv local <version> -- automatically select whenever you are in the current directory (or its subdirectories) pyenv global <version> -- select globally for your user account E.g. to select the above-mentioned newly-installed Python 3.10.4 as your preferred version to use: pyenv global 3.10.4 Now whenever you invoke python, pip etc., an executable from the Pyenv-provided 3.10.4 installation will be run instead of the system Python. Using \"system\" as a version name would reset the selection to your system-provided Python. non-Python applications \u00b6 Using the right image, one might be able to install or compile applications into an attachement or volume, which can be mounted to any other environment.","title":"Package management"},{"location":"packagemanagement/#package_management_for_python","text":"","title":"Package management for Python"},{"location":"packagemanagement/#create_a_conda_environment","text":"> conda create -y --name new_env # Create the nw environment > . /opt/conda/bin/activate # Activate it > conda activate new_env > conda install -y python=3.10 # Install python interpreter # Install packages > conda install -y -c conda-forge --force cudnn cudatoolkit=11.8.0` > conda install -y pip ipykernel # Install ipykernel if you want to use it in notebooks > pip install nvidia-cudnn-cu11==8.6.0.163 > pip install tensorflow==2.12 > ipython kernel install --user --name=new-env - this is needed only if you install it to path, where jupyter is not seeing it.","title":"Create a conda environment"},{"location":"packagemanagement/#use_a_conda_environment","text":"Before activating a conda environment type: > . /opt/conda/bin/activate","title":"Use a conda environment"},{"location":"packagemanagement/#with_uv","text":"An extremely fast Python package installer and resolver, written in Rust Read about uv here: * https://astral.sh/blog/uv * https://github.com/astral-sh/uv Activate it with: > . /opt/python-packages/bin/activate Then install a package uv pip install sqlalchemy pandas","title":"With uv"},{"location":"packagemanagement/#with_poetry","text":"Poetry-kernel is installed to v8 images, therefore it is possible to use poetry environments in notebooks. Visit https://python-poetry.org/ for documentation.","title":"With poetry"},{"location":"packagemanagement/#with_pyenv","text":"witch between Python versions To select a Pyenv-installed Python as the version to use, run one of the following commands: pyenv shell <version> -- select just for current shell session pyenv local <version> -- automatically select whenever you are in the current directory (or its subdirectories) pyenv global <version> -- select globally for your user account E.g. to select the above-mentioned newly-installed Python 3.10.4 as your preferred version to use: pyenv global 3.10.4 Now whenever you invoke python, pip etc., an executable from the Pyenv-provided 3.10.4 installation will be run instead of the system Python. Using \"system\" as a version name would reset the selection to your system-provided Python.","title":"With pyenv"},{"location":"packagemanagement/#non-python_applications","text":"Using the right image, one might be able to install or compile applications into an attachement or volume, which can be mounted to any other environment.","title":"non-Python applications"},{"location":"projects/","text":"Project are a good way to collaborate with each other without much restriction. Permissions on files and folders are set in a restrictive way protecting user's own work Create new project \u00b6 Add project to an environment \u00b6 Permissions on the shared folder \u00b6 #permissions * anyone can create new items in the main folder * by default only the owner of the folder can delete or remove any of it content. * by default all project collaborator can read any of the contents * owners can change the permissions on files and folders Adding users to projects \u00b6 File and folder permissions within a project \u00b6 Everyone can write in the root folder of a project e.g. in case of project_shared_1 in the projects/project_shared_1/ folder. Every collaborator can read all the folders but modify only their own folder. However the owner of the project can read and write the whole content of the project folder.","title":"Projects"},{"location":"projects/#create_new_project","text":"","title":"Create new project"},{"location":"projects/#add_project_to_an_environment","text":"","title":"Add project to an environment"},{"location":"projects/#permissions_on_the_shared_folder","text":"#permissions * anyone can create new items in the main folder * by default only the owner of the folder can delete or remove any of it content. * by default all project collaborator can read any of the contents * owners can change the permissions on files and folders","title":"Permissions on the shared folder"},{"location":"projects/#adding_users_to_projects","text":"","title":"Adding users to projects"},{"location":"projects/#file_and_folder_permissions_within_a_project","text":"Everyone can write in the root folder of a project e.g. in case of project_shared_1 in the projects/project_shared_1/ folder. Every collaborator can read all the folders but modify only their own folder. However the owner of the project can read and write the whole content of the project folder.","title":"File and folder permissions within a project"},{"location":"reports/","text":"Quickstart for creating a plotly report: Report types \u00b6 Static or interactive html \u00b6 Anything that is converted into html can be served as a static html. R shiny dashboards \u00b6 The server will look for an app.R or ui.R . Here are some shiny examples and a tutorial . Example shiny dashboard: Plotly dash \u00b6 Here is an example code The important steps are to use the proper environmental variables when creating the Dash instance and the server object REPORT_URL = os.getenv(\"REPORT_URL\") app = Dash(__name__, url_base_pathname=\"/\"+REPORT_URL) REPORT_PORT = os.getenv(\"REPORT_PORT\") HOSTNAME = os.getenv(\"HOSTNAME\") app.run_server(debug=False, port=REPORT_PORT, host=HOSTNAME) Example plotly plots and dashboards: Bokeh server \u00b6 The image runs automatically the following command: /opt/conda/bin/bokeh serve $REPORT_FOLDER --prefix ${REPORT_URL} --allow-websocket-origin k8plex-test.vo.elte.hu --port $REPORT_PORT It will look for a main.py or main.ipynb file Applications and REST services \u00b6","title":"Applications"},{"location":"reports/#report_types","text":"","title":"Report types"},{"location":"reports/#static_or_interactive_html","text":"Anything that is converted into html can be served as a static html.","title":"Static or interactive html"},{"location":"reports/#r_shiny_dashboards","text":"The server will look for an app.R or ui.R . Here are some shiny examples and a tutorial . Example shiny dashboard:","title":"R shiny dashboards"},{"location":"reports/#plotly_dash","text":"Here is an example code The important steps are to use the proper environmental variables when creating the Dash instance and the server object REPORT_URL = os.getenv(\"REPORT_URL\") app = Dash(__name__, url_base_pathname=\"/\"+REPORT_URL) REPORT_PORT = os.getenv(\"REPORT_PORT\") HOSTNAME = os.getenv(\"HOSTNAME\") app.run_server(debug=False, port=REPORT_PORT, host=HOSTNAME) Example plotly plots and dashboards:","title":"Plotly dash"},{"location":"reports/#bokeh_server","text":"The image runs automatically the following command: /opt/conda/bin/bokeh serve $REPORT_FOLDER --prefix ${REPORT_URL} --allow-websocket-origin k8plex-test.vo.elte.hu --port $REPORT_PORT It will look for a main.py or main.ipynb file","title":"Bokeh server"},{"location":"reports/#applications_and_rest_services","text":"","title":"Applications and REST services"},{"location":"FAQ/Main/","text":"My environments semms to be launched but the browser show me the 'keep waiting' page. \u00b6 It might be, that after and image upgrade the image needs to be reloaded to the given server and it might take 5-10 minutes in the worst case. If this problem persists then let the administrators know about it !","title":"Main"},{"location":"FAQ/Main/#my_environments_semms_to_be_launched_but_the_browser_show_me_the_keep_waiting_page","text":"It might be, that after and image upgrade the image needs to be reloaded to the given server and it might take 5-10 minutes in the worst case. If this problem persists then let the administrators know about it !","title":"My environments semms to be launched but the browser show me the 'keep waiting' page."},{"location":"education/education/","text":"Create a course \u00b6 One can create a course and add additional teachers and students to it. It is also possible to create a course for an existing Canvas course. In order to do that you will need to create a canvas token and upload it to User tokens Configure a course \u00b6 Add new assignment Manage assignments Folder structure \u00b6 See also Folder Structure .","title":"Courses"},{"location":"education/education/#create_a_course","text":"One can create a course and add additional teachers and students to it. It is also possible to create a course for an existing Canvas course. In order to do that you will need to create a canvas token and upload it to User tokens","title":"Create a course"},{"location":"education/education/#configure_a_course","text":"Add new assignment Manage assignments","title":"Configure a course"},{"location":"education/education/#folder_structure","text":"See also Folder Structure .","title":"Folder structure"},{"location":"services/gitea/","text":"Use Version Control system to collaborate and keep a copy and track of your clean code. You can clone the public repositories via the https link provided by gitea, but you cannot push or access them via ssh. First you'll have to upload an ssh-key. Below there is a description how to do that. Use SSH-keys \u00b6 Step 1: generate a key \u00b6 Some references for windows users: using putty or ask google Some references for linux users: a tutorial , github or ssh.com Step 2: upload to gitea \u00b6 Go to https://gitea.vo.elte.hu/user/settings/keys and click on the add-key button (the one with .pub extension) Step 3: copy it locally to the right place \u00b6 If you want to use it on Kooplex, then upload the key to the /v/<username>/.ssh folder, which you might have to create first.","title":"Gitea"},{"location":"services/gitea/#use_ssh-keys","text":"","title":"Use SSH-keys"},{"location":"services/gitea/#step_1_generate_a_key","text":"Some references for windows users: using putty or ask google Some references for linux users: a tutorial , github or ssh.com","title":"Step 1: generate a key"},{"location":"services/gitea/#step_2_upload_to_gitea","text":"Go to https://gitea.vo.elte.hu/user/settings/keys and click on the add-key button (the one with .pub extension)","title":"Step 2: upload to gitea"},{"location":"services/gitea/#step_3_copy_it_locally_to_the_right_place","text":"If you want to use it on Kooplex, then upload the key to the /v/<username>/.ssh folder, which you might have to create first.","title":"Step 3: copy it locally to the right place"},{"location":"services/seafile/","text":"Seafile \u00b6 See Seafile for details on usage. This space allows users, to synchronize files and folders from and to wherever it is possible, Kooplex and private computer etc. They are slow storages, permanently shouldn't be used for large (>1GB) data.","title":"Seafile"},{"location":"services/seafile/#seafile","text":"See Seafile for details on usage. This space allows users, to synchronize files and folders from and to wherever it is possible, Kooplex and private computer etc. They are slow storages, permanently shouldn't be used for large (>1GB) data.","title":"Seafile"},{"location":"settings/canvas/","text":"Get Canvas Token * \u00b6 In Canvas go to Account or Fi\u00f3k -> Setting or Be\u00e1ll\u00edt\u00e1sok and scroll down to the section where it says 'Approved Integrations' or 'J\u00f3v\u00e1hagyott integraci\u00f3k'. There create a new token and copy it and upload to User tokens .","title":"Canvas"},{"location":"settings/canvas/#get_canvas_token","text":"In Canvas go to Account or Fi\u00f3k -> Setting or Be\u00e1ll\u00edt\u00e1sok and scroll down to the section where it says 'Approved Integrations' or 'J\u00f3v\u00e1hagyott integraci\u00f3k'. There create a new token and copy it and upload to User tokens .","title":"Get Canvas Token *"},{"location":"settings/usertokens/","text":"TBC \u00b6","title":"Usertokens"},{"location":"settings/usertokens/#tbc","text":"","title":"TBC"}]}